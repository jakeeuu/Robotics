<launch>
  <arg name="base"       default="burger"/> 

  <!-- Name of the map to use and initial position -->
  <arg name="map_file"       default="$(find second_project)/maps/map.yaml"/> 
  <arg name="world_file"     default="$(find second_project)/maps/stage/maze.world"/>
  <arg name="initial_pose_x" default="0.0"/> 
  <arg name="initial_pose_y" default="0.0"/>
  <arg name="initial_pose_a" default="0.0"/>

  <arg name="odom_frame_id"   default="odom"/>
  <arg name="global_frame_id" default="map"/>

  <param name="/use_sim_time" value="true"/>


 <!--  ***************** Robot simulation *****************  -->
  <node pkg="stage_ros" type="stageros" name="stageros" args="$(arg world_file)">
    <param name="base_watchdog_timeout" value="0.5"/>
    <remap from="base_scan" to="scan"/>
  </node>


  <!--  ***************** Robot Model *****************  -->
  <include file="$(find turtlebot3_bringup)/launch/includes/description.launch.xml"> 
    <arg name="model" value="$(arg base)" />
  </include>
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="use_gui" value="false"/>
  </node>


  <!--  ************** Navigation  ***************  -->
   <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
   
    <rosparam file="$(find second_project)/cfg/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find second_project)/cfg/costmap_common_params.yaml" command="load" ns="local_costmap" />   
    <rosparam file="$(find second_project)/cfg/local_costmap_params.yaml" command="load" />   
    <rosparam file="$(find second_project)/cfg/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find second_project)/cfg/dwa_local_planner_params.yaml" command="load" />
    <rosparam file="$(find second_project)/cfg/move_base_params.yaml" command="load" /> 

    <param name="base_global_planner" value="navfn/NavfnROS" />  <!--   planner  navfn/NavfnROS alternative  carrot_planner/CarrotPlanner -->
    <param name="planner_frequency" value="1.0" />
    <param name="planner_patience" value="5.0" /> <!-- How long the planner will wait in seconds in an attempt to find a valid plan before space-clearing operations are performed.  -->

    <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
    <param name="controller_frequency" value="10.0" />
    <param name="controller_patience" value="5.0" /> <!-- How long the controller will wait in seconds without receiving a valid control before space-clearing operations are performed.  -->

    <param name="clearing_rotation_allowed" value="false"/> 
    
  </node>


  <!--  ****** Maps *****  -->
  <!--nodo che prende in input una map e la pubblica con frame_id=map-->
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)">
    <param name="frame_id" value="map"/>
  </node>


  <!--  ****** amcl *****  -->
  <include file="$(find second_project)/launch/amcl.launch">
    <arg name="scan_topic" value="scan"/>
    <arg name="use_map_topic" value="true"/>
    <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
    <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
    <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
  </include>


  <!--  **************** Visualisation ****************  -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find second_project)/rviz/robot_navigation.rviz"/>

  <!--  ************* Rad goal from csv ***********  -->
  <node name="csv_goal_publisher" pkg="second_project" type="csv_goal_publisher"/>

</launch>